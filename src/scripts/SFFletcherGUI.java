/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package scripts;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.tribot.api2007.Banking;
import org.tribot.api2007.Inventory;
import scripts.actions.*;
import scripts.actions.cut.CutSelectMakeObject;
import scripts.actions.make.MakeSelectMakeObject;
import scripts.actions.make.MakeUseItemWithItem;
import scripts.actions.string.StringSelectMakeObject;
import scripts.framework.Action;
import scripts.framework.Manager;
import scripts.framework.RSCondition;
import scripts.framework.RSFrame;

/**
 * @author Starfox
 */
public class SFFletcherGUI extends RSFrame {
    
    DefaultListModel listModel;
    DefaultComboBoxModel primaryCutModel;
    DefaultComboBoxModel secondaryCutModel;
    DefaultComboBoxModel primaryStringModel;
    DefaultComboBoxModel primaryMakeModel;
    DefaultComboBoxModel secondaryMakeModel;
    private final String[] PRIMARY_CUT = {"Logs", "Oak logs", "Willow logs", "Maple logs", "Yew logs", "Magic logs"};
    private final String[] SECONDARY_CUT = {"Arrow shaft", "Shortbow (u)", "Longbow (u)"};
    private final String[] PRIMARY_STRING = {"Shortbow (u)", "Longbow (u)", "Oak shortbow (u)", "Oak longbow (u)",
                                             "Willow shortbow (u)", "Willow longbow (u)", "Maple shortbow (u)",
                                             "Maple longbow (u)", "Yew shortbow (u)", "Yew longbow (u)", "Magic shortbow (u)",
                                             "Magic longbow (u)"};
    private final String[] PRIMARY_MAKE = {"Arrow shaft", "Headless arrow", "Unfinished bolt", "Dart tips"};
    private final String[] SECONDARY_MAKE_SHAFT = {"Headless arrow"};
    private final String[] SECONDARY_MAKE_HEADLESS_ARROW = {"Bronze arrow", "Ogre arrow", "Iron arrow", "Steel arrow",
                                                            "Mithril arrow", "Broad arrow", "Adamant arrow", "Rune arrow"};
    private final String[] SECONDARY_MAKE_BOLTS = {"Bronze bolt", "Blurite bolt", "Iron bolt", "Silver bolt", "Steel bolt",
                                                   "Mithril bolt", "Adamant bolt", "Runite bolt"};
    private final String[] SECONDARY_MAKE_DART_TIPS = {"Bronze dart", "Iron dart", "Steel dart", "Mithril dart", "Adamant dart",
                                                       "Rune dart"};
    
    /**
     * Creates new form SFFletcherGUI
     * 
     * @param message The message to be displayed when the GUI is disposed of.
     */
    public SFFletcherGUI(final Object message) {
        super(message);
        initComponents();
        setLocationRelativeTo(null);
        listModel = new DefaultListModel();
        primaryCutModel = new DefaultComboBoxModel(PRIMARY_CUT);
        secondaryCutModel = new DefaultComboBoxModel(SECONDARY_CUT);
        primaryStringModel = new DefaultComboBoxModel(PRIMARY_STRING);
        primaryMakeModel = new DefaultComboBoxModel(PRIMARY_MAKE);
        secondaryMakeModel = new DefaultComboBoxModel(SECONDARY_MAKE_SHAFT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scriptPanel = new javax.swing.JPanel();
        optionPanel = new javax.swing.JPanel();
        typeOption = new javax.swing.JComboBox();
        primaryOption = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        secondaryOption = new javax.swing.JComboBox();
        mousePanel = new javax.swing.JPanel();
        mouseSpeedSlider = new javax.swing.JSlider();
        startButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SF Fletcher");

        optionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Script Options"));

        typeOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cut", "String", "Make" }));
        typeOption.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeOptionItemStateChanged(evt);
            }
        });

        primaryOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Logs", "Oak logs", "Willows logs", "Maple logs", "Yew logs", "Magic logs" }));
        primaryOption.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                primaryOptionItemStateChanged(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("into");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        secondaryOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Arrow shaft", "Shortbow (u)", "Longbow (u)" }));

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typeOption, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(primaryOption, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(secondaryOption, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        optionPanelLayout.setVerticalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typeOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(primaryOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secondaryOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mousePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mouse Speed"));

        mouseSpeedSlider.setMajorTickSpacing(20);
        mouseSpeedSlider.setMaximum(200);
        mouseSpeedSlider.setMinimum(100);
        mouseSpeedSlider.setMinorTickSpacing(2);
        mouseSpeedSlider.setPaintLabels(true);
        mouseSpeedSlider.setPaintTicks(true);
        mouseSpeedSlider.setSnapToTicks(true);
        mouseSpeedSlider.setValue(150);

        javax.swing.GroupLayout mousePanelLayout = new javax.swing.GroupLayout(mousePanel);
        mousePanel.setLayout(mousePanelLayout);
        mousePanelLayout.setHorizontalGroup(
            mousePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mousePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mouseSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        mousePanelLayout.setVerticalGroup(
            mousePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mousePanelLayout.createSequentialGroup()
                .addComponent(mouseSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("v1.0");

        javax.swing.GroupLayout scriptPanelLayout = new javax.swing.GroupLayout(scriptPanel);
        scriptPanel.setLayout(scriptPanelLayout);
        scriptPanelLayout.setHorizontalGroup(
            scriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scriptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mousePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(259, 259, 259)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        scriptPanelLayout.setVerticalGroup(
            scriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scriptPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap())
            .addGroup(scriptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mousePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scriptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scriptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        startButtonPressed(evt);
        DynamicVariables.startTime = System.currentTimeMillis();
        Manager.setHasClosed(true);
    }//GEN-LAST:event_startButtonActionPerformed

    private void primaryOptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_primaryOptionItemStateChanged
        final Object type = typeOption.getSelectedItem();
        final Object option = primaryOption.getSelectedItem();
        if(option != null && type != null) {
            if(type.toString().equalsIgnoreCase("Cut")) {
                if(option.toString().equalsIgnoreCase("Logs")) {
                    if(!secondaryCutModel.getElementAt(0).equals("Arrow shaft")) {
                        secondaryCutModel.insertElementAt("Arrow shaft", 0);
                        secondaryOption.setModel(secondaryCutModel);
                    }
                } else {
                    if(secondaryCutModel.getElementAt(0).equals("Arrow shaft")) {
                        secondaryCutModel.removeElementAt(0);
                        secondaryOption.setModel(secondaryCutModel);
                    }
                }
            } else if(type.toString().equalsIgnoreCase("Make")) {
                String[] temp;
                secondaryMakeModel.removeAllElements();
                switch(option.toString()) {
                    case "Arrow shaft":
                    temp = SECONDARY_MAKE_SHAFT;
                    break;
                    case "Headless arrow":
                    temp = SECONDARY_MAKE_HEADLESS_ARROW;
                    break;
                    case "Unfinished bolt":
                    temp = SECONDARY_MAKE_BOLTS;
                    break;
                    case "Dart tips":
                    temp = SECONDARY_MAKE_DART_TIPS;
                    break;
                    default:
                    temp = null;
                }
                if(temp != null) {
                    for(final String string : temp) {
                        secondaryMakeModel.addElement(string);
                    }
                }
                secondaryOption.setModel(secondaryMakeModel);
            }
        }
    }//GEN-LAST:event_primaryOptionItemStateChanged

    private void typeOptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeOptionItemStateChanged
        final Object option = typeOption.getSelectedItem();
        if(option != null) {
            switch(option.toString()) {
                case "Cut":
                    primaryOption.setModel(primaryCutModel);
                    secondaryOption.setModel(secondaryCutModel);
                    secondaryOption.setEnabled(true);
                    return;
                case "String":
                    primaryOption.setModel(primaryStringModel);
                    secondaryOption.setModel(new DefaultComboBoxModel(new String[] {"N/A"}));
                    secondaryOption.setEnabled(false);
                    return;
                case "Make":
                    primaryOption.setModel(primaryMakeModel);
                    secondaryOption.setModel(secondaryMakeModel);
                    secondaryOption.setEnabled(true);
            }
        }
    }//GEN-LAST:event_typeOptionItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SFFletcherGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SFFletcherGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SFFletcherGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SFFletcherGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SFFletcherGUI(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel mousePanel;
    private javax.swing.JSlider mouseSpeedSlider;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JComboBox primaryOption;
    private javax.swing.JPanel scriptPanel;
    private javax.swing.JComboBox secondaryOption;
    private javax.swing.JButton startButton;
    private javax.swing.JComboBox typeOption;
    // End of variables declaration//GEN-END:variables


    @Override
    public HashMap<String, String> processOptions() {
        HashMap<String, String> options = new HashMap<>();
        final String PRIMARY = primaryOption.getSelectedItem().toString();
        final String SECONDARY = secondaryOption.getSelectedItem().toString();
        DynamicVariables.mouseSpeed = mouseSpeedSlider.getValue();
        switch(typeOption.getSelectedItem().toString()) {
            case "Cut":
                options.put("Log name", PRIMARY);
                if(PRIMARY.equalsIgnoreCase("logs")) {
                    options.put("Unstrung bow name", SECONDARY);
                } else {
                    options.put("Unstrung bow name", PRIMARY.replace(" logs", "") + " " + SECONDARY.toLowerCase());
                }
                break;
            case "String":
                options.put("Unstrung bow name", PRIMARY);
                options.put("Strung bow name", PRIMARY.replace(" (u)", ""));
                break;
            case "Make":
                switch(PRIMARY) {
                    case "Arrow shaft":
                        options.put("First item", PRIMARY);
                        options.put("Second item", "Feather");
                        break;
                    case "Headless arrow":
                        options.put("First item", PRIMARY);
                        options.put("Second item", SECONDARY.concat("tips"));
                        break;
                    case "Unfinished bolt":
                        options.put("First item", SECONDARY.concat("s (unf)"));
                        options.put("Second item", "Feather");
                        break;
                    case "Dart tips":
                        options.put("First item", SECONDARY.concat(" tip"));
                        options.put("Second item", "Feather");
                        break;
                }
        }
        return options;
    }

    @Override
    public ArrayList<RSCondition> processTerminateConditions(final HashMap<String, String> options) {
        ArrayList<RSCondition> conditions = new ArrayList<>();
        switch(typeOption.getSelectedItem().toString()) {
            case "Cut":
                conditions.add(new RSCondition() {
                    @Override
                    public boolean isConditionMet() {
                        return Banking.isBankScreenOpen() &&
                               Banking.find(options.get("Log name")).length <= 0 ||
                               (Banking.isBankScreenOpen() && Inventory.find("Knife").length <= 0 &&
                               Banking.find("Knife").length <= 0);
                    }
                });
                break;
            case "String":
                conditions.add(new RSCondition() {
                    @Override
                    public boolean isConditionMet() {
                        return Banking.isBankScreenOpen() &&
                               (Banking.find("Bow string").length <= 0 || 
                                Banking.find(options.get("Unstrung bow name")).length <= 0);
                    }
                });
                break;
            case "Make":
                conditions.add(new RSCondition() {
                    @Override
                    public boolean isConditionMet() {
                        return Inventory.find(options.get("First item"), options.get("Second item")).length <= 1;
                    }
                });
                break;
        }
        return conditions;
    }

    @Override
    public ArrayList<Action> processActions() {
        ArrayList<Action> actions = new ArrayList<>();
        switch(typeOption.getSelectedItem().toString()) {
            case "Cut":
                actions.add(new OpenBankScreen());
                actions.add(new WithdrawItems());
                actions.add(new CloseBankScreen());
                actions.add(new UseItemWithItem());
                actions.add(new CutSelectMakeObject());
                actions.add(new DepositItems());
                break;
            case "String":
                actions.add(new OpenBankScreen());
                actions.add(new WithdrawItems());
                actions.add(new CloseBankScreen());
                actions.add(new UseItemWithItem());
                actions.add(new StringSelectMakeObject());
                actions.add(new DepositItems());
                break;
            case "Make":
                final String PRIMARY = primaryOption.getSelectedItem().toString();
                if(PRIMARY.equalsIgnoreCase("unfinished bolt") || PRIMARY.equalsIgnoreCase("dart tips")) {
                    actions.add(new MakeUseItemWithItem());
                    break;
                }
                actions.add(new UseItemWithItem());
                actions.add(new MakeSelectMakeObject());
                break;
        }
        return actions;
    }
    
    @Override
    public String toString() {
        return "SFFletcherGUI";
    }
}
